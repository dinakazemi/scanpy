[build-system]
build-backend = "hatchling.build"
requires = [ "hatch-vcs", "hatchling" ]

[project]
name = "scanpy"
description = "Single-Cell Analysis in Python."
readme = "README.md"
license = "BSD-3-clause"
maintainers = [
    { name = "Isaac Virshup", email = "ivirshup@gmail.com" },
    { name = "Philipp Angerer", email = "phil.angerer@gmail.com" },
    { name = "Alex Wolf", email = "f.alex.wolf@gmx.de" },
]
authors = [
    { name = "Alex Wolf" },
    { name = "Philipp Angerer" },
    { name = "Fidel Ramirez" },
    { name = "Isaac Virshup" },
    { name = "Sergei Rybakov" },
    { name = "Gokcen Eraslan" },
    { name = "Tom White" },
    { name = "Malte Luecken" },
    { name = "Davide Cittaro" },
    { name = "Tobias Callies" },
    { name = "Marius Lange" },
    { name = "Andrés R. Muñoz-Rojas" },
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Framework :: Jupyter",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Visualization",
]
dynamic = [ "version" ]

dependencies = [
    "anndata>=0.8",
    "h5py>=3.7",
    "joblib",
    "legacy-api-wrap>=1.4",                     # for positional API deprecations
    "matplotlib>=3.6",
    "natsort",
    "networkx>=2.7",
    "numba>=0.57",
    "numpy>=1.24",
    "packaging>=21.3",
    "pandas>=1.5",
    "patsy!=1",                                 # https://github.com/pydata/patsy/issues/215
    "pynndescent>=0.5",
    "scikit-learn>=1.1,<1.6",
    "scipy>=1.8",
    "seaborn>=0.13",
    "session-info2",
    "statsmodels>=0.13",
    "tqdm",
    "typing-extensions; python_version<'3.13'",
    "umap-learn>=0.5,!=0.5",
]
optional-dependencies.bbknn = [ "bbknn" ] # Batch balanced KNN (batch correction)
optional-dependencies.dask = [ "dask[array]>=2022.9.2,<2024.8" ] # Use the Dask parallelization engine
optional-dependencies.dask-ml = [ "dask-ml", "scanpy[dask]" ] # Dask-ML for sklearn-like API
optional-dependencies.dev = [
    # static checking
    "pre-commit",
    # getting the dev version
    "setuptools-scm",
    "towncrier",
]
optional-dependencies.doc = [
    "ipython>=7.20",             # for nbsphinx code highlighting
    "matplotlib!=3.6.1",
    "myst-nb>=1",
    "myst-parser>=2",
    "nbsphinx>=0.9",
    "readthedocs-sphinx-search",
    "sam-algorithm",
    # TODO: remove necessity for being able to import doc-linked classes
    "scanpy[paga,dask-ml]",
    "scanpydoc>=0.14.1",
    "setuptools",                       # undeclared dependency of sphinxcontrib-bibtex→pybtex
    "sphinx>=7",
    "sphinx-autodoc-typehints>=1.25.2",
    "sphinx-book-theme>=1.1",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx-tabs",
    "sphinxcontrib-bibtex",
    "sphinxext-opengraph",              # for nice cards when sharing on social
]
optional-dependencies.harmony = [ "harmonypy" ] # Harmony dataset integration
optional-dependencies.leiden = [ "igraph>=0.10", "leidenalg>=0.9" ] # Leiden community detection
optional-dependencies.louvain = [ "igraph", "louvain>=0.6,!=0.6.2" ] # Louvain community detection
optional-dependencies.magic = [ "magic-impute>=2" ] # MAGIC imputation method
optional-dependencies.paga = [ "igraph" ]
optional-dependencies.rapids = [ "cudf>=0.9", "cugraph>=0.9", "cuml>=0.9" ] # GPU accelerated calculation of neighbors
optional-dependencies.scanorama = [ "scanorama" ] # Scanorama dataset integration
optional-dependencies.scrublet = [ "scikit-image" ] # Doublet detection with automatic thresholds
optional-dependencies.skmisc = [ "scikit-misc>=0.1.3" ] # highly_variable_genes method 'seurat_v3'
# this test config adds optional but important dependencies
optional-dependencies.test = [
    "scanpy[dask]",
    "scanpy[leiden]",
    "scanpy[scrublet]",
    "scanpy[test-min]", # test config this one extends
    "zarr",
]
# this test config mainly adds additional tested algorithms
optional-dependencies.test-full = [
    "scanpy[dask-ml]",
    "scanpy[harmony]",
    "scanpy[louvain]",
    "scanpy[magic]",
    "scanpy[scanorama]",
    "scanpy[skmisc]",
    "scanpy[test]",      # test config this one extends
    "zappy",             # optional storage mode
]
optional-dependencies.test-min = [
    "profimp",
    "pytest>=8.2",
    "pytest-cov",
    "pytest-mock",
    "pytest-nunit",
]
urls.Discourse = "https://discourse.scverse.org/c/help/scanpy/37"
urls.Documentation = "https://scanpy.readthedocs.io/"
urls.Home-page = "https://scanpy.org"
urls.Source = "https://github.com/scverse/scanpy"
urls.Twitter = "https://twitter.com/scverse_team"
scripts.scanpy = "scanpy.cli:console_main"

[tool.hatch.build.targets.wheel]
packages = [ "src/testing", "src/scanpy" ]
[tool.hatch.version]
source = "vcs"
raw-options.version_scheme = "release-branch-semver"
[tool.hatch.build.hooks.vcs]
version-file = "src/scanpy/_version.py"

[tool.ruff]
src = [ "src" ]
format.docstring-code-format = true
lint.select = [
    "E",       # Error detected by Pycodestyle
    "F",       # Errors detected by Pyflakes
    "FBT",     # No positional boolean parameters
    "I",       # isort
    "ICN",     # Follow import conventions
    "PLR0917", # Ban APIs with too many positional parameters
    "PT",      # Pytest style
    "PTH",     # Pathlib instead of os.path
    "PYI",     # Typing
    "SIM",     # Simplify control flow
    "TCH",     # manage type checking blocks
    "TID251",  # Banned imports
    "UP",      # pyupgrade
    "W",       # Warning detected by Pycodestyle
]
lint.ignore = [
    # E266 too many leading '#' for block comment -> Scanpy allows them for comments into sections
    "E262",
    # module level import not at top of file -> required to circumvent circular imports for Scanpys API
    "E402",
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # allow I, O, l as variable names -> I is the identity matrix, i, j, k, l is reasonable indexing notation
    "E741",
    # `Literal["..."] | str` is useful for autocompletion
    "PYI051",
]
# Do not assign a lambda expression, use a def
lint.per-file-ignores."src/scanpy/tools/_rank_genes_groups.py" = [ "E731" ]
lint.flake8-tidy-imports.banned-api."legacy_api_wrap.legacy_api".msg = "Use scanpy._compat.old_positionals instead"
lint.flake8-tidy-imports.banned-api."numba.jit".msg = "Use `scanpy._compat.njit` instead"
lint.flake8-tidy-imports.banned-api."numba.njit".msg = "Use `scanpy._compat.njit` instead"
lint.flake8-tidy-imports.banned-api."numpy.bool".msg = "Use `np.bool_` instead for numpy>=1.24<2 compatibility"
lint.flake8-tidy-imports.banned-api."pandas.api.types.is_categorical_dtype".msg = "Use isinstance(s.dtype, CategoricalDtype) instead"
lint.flake8-tidy-imports.banned-api."pandas.value_counts".msg = "Use pd.Series(a).value_counts() instead"
lint.flake8-tidy-imports.banned-api."pytest.importorskip".msg = "Use the “@needs” decorator/mark instead"
lint.flake8-type-checking.exempt-modules = [  ]
lint.flake8-type-checking.strict = true
lint.isort.known-first-party = [ "scanpy", "testing.scanpy" ]
lint.isort.required-imports = [ "from __future__ import annotations" ]

[tool.pyproject-fmt]
max_supported_python = "3.12"
indent = 4

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "--strict-markers",
    "--doctest-modules",
    "-ptesting.scanpy._pytest",
    "--pyargs",
]
testpaths = [ "./tests", "./ci", "scanpy" ]
norecursedirs = [ "tests/_images" ]
xfail_strict = true
nunit_attach_on = "fail"
markers = [
    "internet: tests which rely on internet resources (enable with `--internet-tests`)",
    "gpu: tests that use a GPU (currently unused, but needs to be specified here as we import anndata.tests.helpers, which uses it)",
    "anndata_dask_support: tests that require dask support in anndata",
]
filterwarnings = [
    # legacy-api-wrap: internal use of positional API
    "error:The specified parameters:FutureWarning",
    # When calling `.show()` in tests, this is raised
    "ignore:FigureCanvasAgg is non-interactive:UserWarning",

    # We explicitly handle the below errors in tests
    "error:`anndata.read` is deprecated:FutureWarning",
    "error:Observation names are not unique:UserWarning",
    "error:The dtype argument is deprecated and will be removed:FutureWarning",
    "error:The behavior of DataFrame\\.sum with axis=None is deprecated:FutureWarning",
    "error:The default of observed=False is deprecated:FutureWarning",
    "error:Series\\.__getitem__ treating keys as positions is deprecated:FutureWarning",
    "error:The default value of 'ignore' for the `na_action` parameter in pandas\\.Categorical\\.map:FutureWarning",
    "error:The provided callable.* is currently using:FutureWarning",
    "error:The behavior of DataFrame concatenation with empty or all-NA entries is deprecated:FutureWarning",
    "error:A value is trying to be set on a copy of a slice from a DataFrame",
    "error:No data for colormapping provided via 'c'",
    "error:\\n*The `scale` parameter has been renamed and will be removed",
    "error:\\n*Passing `palette` without assigning `hue` is deprecated",
    "error:\\n*Setting a gradient palette using color= is deprecated",
]

[tool.coverage.run]
data_file = "test-data/coverage"
source_pkgs = [ "scanpy" ]
omit = [ "tests/*", "src/testing/*" ]
[tool.coverage.xml]
output = "test-data/coverage.xml"
[tool.coverage.paths]
source = [ ".", "**/site-packages" ]
[tool.coverage.report]
exclude_also = [
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    # https://github.com/numba/numba/issues/4268
    '@(numba\.|nb\.)njit.*',
]

[tool.towncrier]
package = "scanpy"
directory = "docs/release-notes"
filename = "docs/release-notes/{version}.md"
single_file = false
package_dir = "src"
issue_format = "{{pr}}`{issue}`"
title_format = "(v{version})=\n### {version} {{small}}`{project_date}`"
fragment.bugfix.name = "Bug fixes"
fragment.doc.name = "Documentation"
fragment.feature.name = "Features"
fragment.misc.name = "Miscellaneous improvements"
fragment.performance.name = "Performance"
fragment.breaking.name = "Breaking changes"
fragment.dev.name = "Development Process"
